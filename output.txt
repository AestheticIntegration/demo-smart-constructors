utop [0]: #use "demo.ml";;
val pp_hr : unit -> unit = <fun>

############################################################

- : unit = ()
e2:
- : unit = ()
- : aexpr =
((((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z)
 ^ 2)
derive e2 with simplification:
- : unit = ()
- : aexpr =
(20
 * (((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z))
derive e2 without simplification:
- : unit = ()
- : unit = ()
- : aexpr =
((2
  * (((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z))
 * ((((0 * ((2 * x) + (3 * (y ^ 10))))
      + (3
         * (((0 * x) + (2 * 1)) + ((0 * (y ^ 10)) + (3 * ((10 * (y ^ 9)) * 0))))))
     + ((0 * ((2 * x) + (3 * (y ^ 10))))
        + (2
           * (((0 * x) + (2 * 1))
              + ((0 * (y ^ 10)) + (3 * ((10 * (y ^ 9)) * 0)))))))
    + 0))

############################################################

- : unit = ()
- : unit = ()
e3:
- : unit = ()
- : aexpr =
(((((2 * x) + (3 * (y ^ 10))) * x)
  - ((((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z)
     ^ 2))
 + (x * (Σ_{x=1}^{x} ((2 * x) + (3 * (y ^ 10))))))
free vars of e3:
- : unit = ()
- : string list = ["x"; "y"; "z"]
derive e3 with simplification:
- : unit = ()
- : aexpr =
((((2 * x) + ((2 * x) + (3 * (y ^ 10))))
  + (-20
     * (((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10)))))
        + z)))
 + (Σ_{x=1}^{x} ((2 * x) + (3 * (y ^ 10)))))
derive e3 without simplification:
- : unit = ()
- : unit = ()
- : aexpr =
(((((((0 * x) + (2 * 1)) + ((0 * (y ^ 10)) + (3 * ((10 * (y ^ 9)) * 0)))) * x)
   + (((2 * x) + (3 * (y ^ 10))) * 1))
  - ((2
      * (((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10)))))
         + z))
     * ((((0 * ((2 * x) + (3 * (y ^ 10))))
          + (3
             * (((0 * x) + (2 * 1))
                + ((0 * (y ^ 10)) + (3 * ((10 * (y ^ 9)) * 0))))))
         + ((0 * ((2 * x) + (3 * (y ^ 10))))
            + (2
               * (((0 * x) + (2 * 1))
                  + ((0 * (y ^ 10)) + (3 * ((10 * (y ^ 9)) * 0)))))))
        + 0)))
 + ((1 * (Σ_{x=1}^{x} ((2 * x) + (3 * (y ^ 10))))) + (x * 0)))

############################################################

- : unit = ()
- : unit = ()
eval e2 with substitution {x -> 3, y -> (2 + x)}
- : unit = ()
- : aexpr = ((146484405 + z) ^ 2)
and now without simpl:
- : unit = ()
- : unit = ()
- : aexpr =
((((3 * ((2 * 3) + (3 * ((2 + 3) ^ 10))))
   + (2 * ((2 * 3) + (3 * ((2 + 3) ^ 10)))))
  + z)
 ^ 2)
eval e3 with substitution {x -> (2 * y), y -> (2 + z), z -> 10}
- : unit = ()
- : unit = ()
- : aexpr = 1424349158319291484
and now without simpl:
- : unit = ()
- : unit = ()
- : aexpr =
(((((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))) * (2 * (2 + 10)))
  - ((((3 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))
       + (2 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10)))))
      + 10)
     ^ 2))
 + ((2 * (2 + 10))
    * (Σ_{x=1}^{(2 * (2 + 10))} ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))))

############################################################

- : unit = ()
- : unit = ()
b1:
- : unit = ()
- : bexpr =
((((((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z)
   ^ 2)
  = ((((3 * ((2 * x) + (3 * (y ^ 10)))) + (2 * ((2 * x) + (3 * (y ^ 10))))) + z)
     ^ 2))
 || (not
     (((2 * x) + (3 * (y ^ 10)))
      = (((((2 * x) + (3 * (y ^ 10))) * x)
          - ((((3 * ((2 * x) + (3 * (y ^ 10))))
               + (2 * ((2 * x) + (3 * (y ^ 10)))))
              + z)
             ^ 2))
         + (x * (Σ_{x=1}^{x} ((2 * x) + (3 * (y ^ 10))))))))
     || ((x = y) && (x = z))))
eval b1 with substitution {x -> (2 * y), y -> (2 + z), z -> 10}
- : unit = ()
- : unit = ()
- : bexpr = true
and now without simpl:
- : unit = ()
- : unit = ()
- : bexpr =
((((((3 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))
     + (2 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10)))))
    + 10)
   ^ 2)
  = ((((3 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))
       + (2 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10)))))
      + 10)
     ^ 2))
 || (not
     (((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10)))
      = (((((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))) * (2 * (2 + 10)))
          - ((((3 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))
               + (2 * ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10)))))
              + 10)
             ^ 2))
         + ((2 * (2 + 10))
            * (Σ_{x=1}^{(2 * (2 + 10))}
               ((2 * (2 * (2 + 10))) + (3 * ((2 + 10) ^ 10))))))))
     || (((2 * (2 + 10)) = (2 + 10)) && ((2 * (2 + 10)) = 10))))
- : unit = ()

